/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE IMPLEMENT_CFG_NOTIFY PACKING
package com.MAVLink.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* implement cfg.
*/
public class msg_implement_cfg_notify extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_IMPLEMENT_CFG_NOTIFY = 8;
    public static final int MAVLINK_MSG_LENGTH = 96;
    private static final long serialVersionUID = MAVLINK_MSG_ID_IMPLEMENT_CFG_NOTIFY;


      
    /**
    * 
    */
    public float implement_d;
      
    /**
    * 
    */
    public float implement_offset;
      
    /**
    * 
    */
    public float imp_hitch_type;
      
    /**
    * 
    */
    public float trueguide_flag;
      
    /**
    * 
    */
    public float impl_antenna_front_d;
      
    /**
    * 
    */
    public float impl_antenna_left_d;
      
    /**
    * 
    */
    public float impl_antenna_height;
      
    /**
    * 
    */
    public float reserved[] = new float[17];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_IMPLEMENT_CFG_NOTIFY;
              
        packet.payload.putFloat(implement_d);
              
        packet.payload.putFloat(implement_offset);
              
        packet.payload.putFloat(imp_hitch_type);
              
        packet.payload.putFloat(trueguide_flag);
              
        packet.payload.putFloat(impl_antenna_front_d);
              
        packet.payload.putFloat(impl_antenna_left_d);
              
        packet.payload.putFloat(impl_antenna_height);
              
        
        for (int i = 0; i < reserved.length; i++) {
            packet.payload.putFloat(reserved[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a implement_cfg_notify message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.implement_d = payload.getFloat();
              
        this.implement_offset = payload.getFloat();
              
        this.imp_hitch_type = payload.getFloat();
              
        this.trueguide_flag = payload.getFloat();
              
        this.impl_antenna_front_d = payload.getFloat();
              
        this.impl_antenna_left_d = payload.getFloat();
              
        this.impl_antenna_height = payload.getFloat();
              
         
        for (int i = 0; i < this.reserved.length; i++) {
            this.reserved[i] = payload.getFloat();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_implement_cfg_notify(){
        msgid = MAVLINK_MSG_ID_IMPLEMENT_CFG_NOTIFY;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_implement_cfg_notify(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_IMPLEMENT_CFG_NOTIFY;
        unpack(mavLinkPacket.payload);        
    }

                    
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_IMPLEMENT_CFG_NOTIFY -"+" implement_d:"+implement_d+" implement_offset:"+implement_offset+" imp_hitch_type:"+imp_hitch_type+" trueguide_flag:"+trueguide_flag+" impl_antenna_front_d:"+impl_antenna_front_d+" impl_antenna_left_d:"+impl_antenna_left_d+" impl_antenna_height:"+impl_antenna_height+" reserved:"+reserved+"";
    }
}
        