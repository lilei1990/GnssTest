/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE NAV_CMD_PARAM_DATA PACKING
package com.MAVLink.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* nav cmd params.
*/
public class msg_nav_cmd_param_data extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_NAV_CMD_PARAM_DATA = 153;
    public static final int MAVLINK_MSG_LENGTH = 42;
    private static final long serialVersionUID = MAVLINK_MSG_ID_NAV_CMD_PARAM_DATA;


      
    /**
    * device id
    */
    public long deviceid;
      
    /**
    * message id
    */
    public long index;
      
    /**
    * UNIX time (+8),yyyyMMddHHmmss,sample 2017.5.15 11:00:00, timestamp is 20170515110000
    */
    public long timestamp;
      
    /**
    * Latitude (WGS84), in degrees * 1E7
    */
    public int src_lat;
      
    /**
    * Longitude (WGS84), in degrees * 1E7
    */
    public int src_lon;
      
    /**
    * Latitude (WGS84), in degrees * 1E7
    */
    public int dst_lat;
      
    /**
    * Longitude (WGS84), in degrees * 1E7
    */
    public int dst_lon;
      
    /**
    * cmd type
    */
    public short command;
      
    /**
    * stop case, see MAV_NAV_STOP_CASE
    */
    public short stopcase;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_NAV_CMD_PARAM_DATA;
              
        packet.payload.putUnsignedLong(deviceid);
              
        packet.payload.putUnsignedLong(index);
              
        packet.payload.putUnsignedLong(timestamp);
              
        packet.payload.putInt(src_lat);
              
        packet.payload.putInt(src_lon);
              
        packet.payload.putInt(dst_lat);
              
        packet.payload.putInt(dst_lon);
              
        packet.payload.putUnsignedByte(command);
              
        packet.payload.putUnsignedByte(stopcase);
        
        return packet;
    }

    /**
    * Decode a nav_cmd_param_data message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.deviceid = payload.getUnsignedLong();
              
        this.index = payload.getUnsignedLong();
              
        this.timestamp = payload.getUnsignedLong();
              
        this.src_lat = payload.getInt();
              
        this.src_lon = payload.getInt();
              
        this.dst_lat = payload.getInt();
              
        this.dst_lon = payload.getInt();
              
        this.command = payload.getUnsignedByte();
              
        this.stopcase = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_nav_cmd_param_data(){
        msgid = MAVLINK_MSG_ID_NAV_CMD_PARAM_DATA;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_nav_cmd_param_data(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_NAV_CMD_PARAM_DATA;
        unpack(mavLinkPacket.payload);        
    }

                      
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_NAV_CMD_PARAM_DATA -"+" deviceid:"+deviceid+" index:"+index+" timestamp:"+timestamp+" src_lat:"+src_lat+" src_lon:"+src_lon+" dst_lat:"+dst_lat+" dst_lon:"+dst_lon+" command:"+command+" stopcase:"+stopcase+"";
    }
}
        