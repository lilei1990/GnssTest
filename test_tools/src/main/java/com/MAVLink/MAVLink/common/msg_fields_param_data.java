/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE FIELDS_PARAM_DATA PACKING
package com.MAVLink.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* field and plow params
*/
public class msg_fields_param_data extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_FIELDS_PARAM_DATA = 151;
    public static final int MAVLINK_MSG_LENGTH = 89;
    private static final long serialVersionUID = MAVLINK_MSG_ID_FIELDS_PARAM_DATA;


      
    /**
    * device id
    */
    public long deviceid;
      
    /**
    * message id
    */
    public long index;
      
    /**
    * UNIX time (+8),yyyyMMddHHmmss,sample 2017.5.15 11:00:00, timestamp is 20170515110000
    */
    public long timestamp;
      
    /**
    * plow width, in cm
    */
    public int width;
      
    /**
    * plow overlapskip, in cm
    */
    public int overlapskip;
      
    /**
    * plow horizontal, in cm
    */
    public int horizontal;
      
    /**
    * plow vertical, in cm
    */
    public int vertical;
      
    /**
    * Latitude (WGS84), in degrees * 1E7
    */
    public int a_lat;
      
    /**
    * Longitude (WGS84), in degrees * 1E7
    */
    public int a_lon;
      
    /**
    * Latitude (WGS84), in degrees * 1E7
    */
    public int b_lat;
      
    /**
    * Longitude (WGS84), in degrees * 1E7
    */
    public int b_lon;
      
    /**
    * field name
    */
    public byte name[] = new byte[32];
      
    /**
    * pattern, see MAV_PATTERN enum
    */
    public short pattern;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_FIELDS_PARAM_DATA;
              
        packet.payload.putUnsignedLong(deviceid);
              
        packet.payload.putUnsignedLong(index);
              
        packet.payload.putUnsignedLong(timestamp);
              
        packet.payload.putInt(width);
              
        packet.payload.putInt(overlapskip);
              
        packet.payload.putInt(horizontal);
              
        packet.payload.putInt(vertical);
              
        packet.payload.putInt(a_lat);
              
        packet.payload.putInt(a_lon);
              
        packet.payload.putInt(b_lat);
              
        packet.payload.putInt(b_lon);
              
        
        for (int i = 0; i < name.length; i++) {
            packet.payload.putByte(name[i]);
        }
                    
              
        packet.payload.putUnsignedByte(pattern);
        
        return packet;
    }

    /**
    * Decode a fields_param_data message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.deviceid = payload.getUnsignedLong();
              
        this.index = payload.getUnsignedLong();
              
        this.timestamp = payload.getUnsignedLong();
              
        this.width = payload.getInt();
              
        this.overlapskip = payload.getInt();
              
        this.horizontal = payload.getInt();
              
        this.vertical = payload.getInt();
              
        this.a_lat = payload.getInt();
              
        this.a_lon = payload.getInt();
              
        this.b_lat = payload.getInt();
              
        this.b_lon = payload.getInt();
              
         
        for (int i = 0; i < this.name.length; i++) {
            this.name[i] = payload.getByte();
        }
                
              
        this.pattern = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_fields_param_data(){
        msgid = MAVLINK_MSG_ID_FIELDS_PARAM_DATA;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_fields_param_data(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_FIELDS_PARAM_DATA;
        unpack(mavLinkPacket.payload);        
    }

                           
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setName(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            name[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getName() {
        String result = "";
        for (int i = 0; i < 32; i++) {
            if (name[i] != 0)
                result = result + (char) name[i];
            else
                break;
        }
        return result;

    }
                           
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_FIELDS_PARAM_DATA -"+" deviceid:"+deviceid+" index:"+index+" timestamp:"+timestamp+" width:"+width+" overlapskip:"+overlapskip+" horizontal:"+horizontal+" vertical:"+vertical+" a_lat:"+a_lat+" a_lon:"+a_lon+" b_lat:"+b_lat+" b_lon:"+b_lon+" name:"+name+" pattern:"+pattern+"";
    }
}
        