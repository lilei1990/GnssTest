/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LOG_EKF4 PACKING
package com.MAVLink.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* ekf1
*/
public class msg_log_ekf4 extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_LOG_EKF4 = 163;
    public static final int MAVLINK_MSG_LENGTH = 29;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LOG_EKF4;


      
    /**
    * a
    */
    public long time_us;
      
    /**
    * a
    */
    public float tiltErr;
      
    /**
    * a
    */
    public short sqrtvarV;
      
    /**
    * a
    */
    public short sqrtvarP;
      
    /**
    * a
    */
    public short sqrtvarVT;
      
    /**
    * a
    */
    public int faults;
      
    /**
    * a
    */
    public int timeouts;
      
    /**
    * a
    */
    public int solution;
      
    /**
    * a
    */
    public int gps;
      
    /**
    * a
    */
    public byte offsetNorth;
      
    /**
    * a
    */
    public byte offsetEast;
      
    /**
    * a
    */
    public byte primary;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_LOG_EKF4;
              
        packet.payload.putUnsignedLong(time_us);
              
        packet.payload.putFloat(tiltErr);
              
        packet.payload.putShort(sqrtvarV);
              
        packet.payload.putShort(sqrtvarP);
              
        packet.payload.putShort(sqrtvarVT);
              
        packet.payload.putUnsignedShort(faults);
              
        packet.payload.putUnsignedShort(timeouts);
              
        packet.payload.putUnsignedShort(solution);
              
        packet.payload.putUnsignedShort(gps);
              
        packet.payload.putByte(offsetNorth);
              
        packet.payload.putByte(offsetEast);
              
        packet.payload.putByte(primary);
        
        return packet;
    }

    /**
    * Decode a log_ekf4 message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.time_us = payload.getUnsignedLong();
              
        this.tiltErr = payload.getFloat();
              
        this.sqrtvarV = payload.getShort();
              
        this.sqrtvarP = payload.getShort();
              
        this.sqrtvarVT = payload.getShort();
              
        this.faults = payload.getUnsignedShort();
              
        this.timeouts = payload.getUnsignedShort();
              
        this.solution = payload.getUnsignedShort();
              
        this.gps = payload.getUnsignedShort();
              
        this.offsetNorth = payload.getByte();
              
        this.offsetEast = payload.getByte();
              
        this.primary = payload.getByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_log_ekf4(){
        msgid = MAVLINK_MSG_ID_LOG_EKF4;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_log_ekf4(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_LOG_EKF4;
        unpack(mavLinkPacket.payload);        
    }

                            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_LOG_EKF4 -"+" time_us:"+time_us+" tiltErr:"+tiltErr+" sqrtvarV:"+sqrtvarV+" sqrtvarP:"+sqrtvarP+" sqrtvarVT:"+sqrtvarVT+" faults:"+faults+" timeouts:"+timeouts+" solution:"+solution+" gps:"+gps+" offsetNorth:"+offsetNorth+" offsetEast:"+offsetEast+" primary:"+primary+"";
    }
}
        