/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CONTROL_DATA PACKING
package com.MAVLink.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* gps and control realtime data
*/
public class msg_control_data extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_CONTROL_DATA = 155;
    public static final int MAVLINK_MSG_LENGTH = 216;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CONTROL_DATA;


      
    /**
    * device id
    */
    public long deviceid;
      
    /**
    * message id
    */
    public long index;
      
    /**
    * UNIX time (+8),yyyyMMddHHmmss,sample 2017.5.15 11:00:00, timestamp is 20170515110000
    */
    public long timestamp;
      
    /**
    * Latitude (WGS84), in degrees * 1E7
    */
    public int raw_lat;
      
    /**
    * Longitude (WGS84), in degrees * 1E7
    */
    public int raw_lon;
      
    /**
    * Altitude (AMSL, NOT WGS84), in meters * 1000 (positive for up). Note that virtually all GPS modules provide the AMSL altitude in addition to the WGS84 altitude.
    */
    public int raw_alt;
      
    /**
    * Latitude, expressed as degrees * 1E7
    */
    public int global_lat;
      
    /**
    * Longitude, expressed as degrees * 1E7
    */
    public int global_lon;
      
    /**
    * Altitude in meters, expressed as * 1000 (millimeters), AMSL (not WGS84 - note that virtually all GPS modules provide the AMSL as well)
    */
    public int global_alt;
      
    /**
    * Altitude above ground in meters, expressed as * 1000 (millimeters)
    */
    public int global_relative_alt;
      
    /**
    * steering angle
    */
    public float angles;
      
    /**
    * Current desired roll in degrees
    */
    public float nav_roll;
      
    /**
    * Current desired pitch in degrees
    */
    public float nav_pitch;
      
    /**
    * Current altitude error in meters
    */
    public float alt_error;
      
    /**
    * Current airspeed error in meters/second
    */
    public float aspd_error;
      
    /**
    * Current crosstrack error on x-y plane in meters
    */
    public float xtrack_error;
      
    /**
    * Current L1 distance in meters
    */
    public float L1_dist;
      
    /**
    * Current L1 distance in meters
    */
    public float groundSpeed;
      
    /**
    * Current L1 distance in meters
    */
    public float AB_length;
      
    /**
    * Current L1 distance in meters
    */
    public float longitudinal_deviation;
      
    /**
    * Current L1 distance in meters
    */
    public float WP_A_dist;
      
    /**
    * Current L1 distance in meters
    */
    public float alongTrackDist;
      
    /**
    * Current L1 distance in meters
    */
    public float Nu;
      
    /**
    * Current L1 distance in meters
    */
    public float L1_xtrack_i;
      
    /**
    * Current L1 distance in meters
    */
    public float Nu1;
      
    /**
    * Current L1 distance in meters
    */
    public float Nu2;
      
    /**
    * Current L1 distance in meters
    */
    public float sine_Nu1;
      
    /**
    * Distance to active MISSION in meters
    */
    public int loc;
      
    /**
    * Roll angle (rad, -pi..+pi)
    */
    public float roll;
      
    /**
    * Pitch angle (rad, -pi..+pi)
    */
    public float pitch;
      
    /**
    * Yaw angle (rad, -pi..+pi)
    */
    public float yaw;
      
    /**
    * Roll angular speed (rad/s)
    */
    public float rollspeed;
      
    /**
    * Pitch angular speed (rad/s)
    */
    public float pitchspeed;
      
    /**
    * Yaw angular speed (rad/s)
    */
    public float yawspeed;
      
    /**
    * expected wheel angle
    */
    public float expected_angle;
      
    /**
    * achieved wheel angle
    */
    public float achieved_angle;
      
    /**
    * expected lateral acceleration
    */
    public float expected_accel;
      
    /**
    * achieved lateral acceleration
    */
    public float achieved_accel;
      
    /**
    * P in last_out
    */
    public float P;
      
    /**
    * I in last_out
    */
    public float I;
      
    /**
    * D in last_out
    */
    public float D;
      
    /**
    * last_out
    */
    public float last_out;
      
    /**
    * GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
    */
    public int raw_eph;
      
    /**
    * GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
    */
    public int raw_epv;
      
    /**
    * GPS ground speed (m/s * 100). If unknown, set to: UINT16_MAX
    */
    public int raw_vel;
      
    /**
    * Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
    */
    public int raw_cog;
      
    /**
    * Ground X Speed (Latitude, positive north), expressed as m/s * 100
    */
    public short global_vx;
      
    /**
    * Ground Y Speed (Longitude, positive east), expressed as m/s * 100
    */
    public short global_vy;
      
    /**
    * Ground Z Speed (Altitude, positive down), expressed as m/s * 100
    */
    public short global_vz;
      
    /**
    * Vehicle heading (yaw angle) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
    */
    public int global_hdg;
      
    /**
    * X acceleration (raw)
    */
    public short imu_xacc;
      
    /**
    * Y acceleration (raw)
    */
    public short imu_yacc;
      
    /**
    * Z acceleration (raw)
    */
    public short imu_zacc;
      
    /**
    * Angular speed around X axis (raw)
    */
    public short imu_xgyro;
      
    /**
    * Angular speed around Y axis (raw)
    */
    public short imu_ygyro;
      
    /**
    * Angular speed around Z axis (raw)
    */
    public short imu_zgyro;
      
    /**
    * Current desired heading in degrees
    */
    public short nav_bearing;
      
    /**
    * Bearing to current MISSION/target in degrees
    */
    public short target_bearing;
      
    /**
    * Distance to active MISSION in meters
    */
    public int wp_dist;
      
    /**
    * See the GPS_FIX_TYPE enum.
    */
    public short raw_fix_type;
      
    /**
    * Number of satellites visible. If unknown, set to 255
    */
    public short raw_satellites_visible;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_CONTROL_DATA;
              
        packet.payload.putUnsignedLong(deviceid);
              
        packet.payload.putUnsignedLong(index);
              
        packet.payload.putUnsignedLong(timestamp);
              
        packet.payload.putInt(raw_lat);
              
        packet.payload.putInt(raw_lon);
              
        packet.payload.putInt(raw_alt);
              
        packet.payload.putInt(global_lat);
              
        packet.payload.putInt(global_lon);
              
        packet.payload.putInt(global_alt);
              
        packet.payload.putInt(global_relative_alt);
              
        packet.payload.putFloat(angles);
              
        packet.payload.putFloat(nav_roll);
              
        packet.payload.putFloat(nav_pitch);
              
        packet.payload.putFloat(alt_error);
              
        packet.payload.putFloat(aspd_error);
              
        packet.payload.putFloat(xtrack_error);
              
        packet.payload.putFloat(L1_dist);
              
        packet.payload.putFloat(groundSpeed);
              
        packet.payload.putFloat(AB_length);
              
        packet.payload.putFloat(longitudinal_deviation);
              
        packet.payload.putFloat(WP_A_dist);
              
        packet.payload.putFloat(alongTrackDist);
              
        packet.payload.putFloat(Nu);
              
        packet.payload.putFloat(L1_xtrack_i);
              
        packet.payload.putFloat(Nu1);
              
        packet.payload.putFloat(Nu2);
              
        packet.payload.putFloat(sine_Nu1);
              
        packet.payload.putInt(loc);
              
        packet.payload.putFloat(roll);
              
        packet.payload.putFloat(pitch);
              
        packet.payload.putFloat(yaw);
              
        packet.payload.putFloat(rollspeed);
              
        packet.payload.putFloat(pitchspeed);
              
        packet.payload.putFloat(yawspeed);
              
        packet.payload.putFloat(expected_angle);
              
        packet.payload.putFloat(achieved_angle);
              
        packet.payload.putFloat(expected_accel);
              
        packet.payload.putFloat(achieved_accel);
              
        packet.payload.putFloat(P);
              
        packet.payload.putFloat(I);
              
        packet.payload.putFloat(D);
              
        packet.payload.putFloat(last_out);
              
        packet.payload.putUnsignedShort(raw_eph);
              
        packet.payload.putUnsignedShort(raw_epv);
              
        packet.payload.putUnsignedShort(raw_vel);
              
        packet.payload.putUnsignedShort(raw_cog);
              
        packet.payload.putShort(global_vx);
              
        packet.payload.putShort(global_vy);
              
        packet.payload.putShort(global_vz);
              
        packet.payload.putUnsignedShort(global_hdg);
              
        packet.payload.putShort(imu_xacc);
              
        packet.payload.putShort(imu_yacc);
              
        packet.payload.putShort(imu_zacc);
              
        packet.payload.putShort(imu_xgyro);
              
        packet.payload.putShort(imu_ygyro);
              
        packet.payload.putShort(imu_zgyro);
              
        packet.payload.putShort(nav_bearing);
              
        packet.payload.putShort(target_bearing);
              
        packet.payload.putUnsignedShort(wp_dist);
              
        packet.payload.putUnsignedByte(raw_fix_type);
              
        packet.payload.putUnsignedByte(raw_satellites_visible);
        
        return packet;
    }

    /**
    * Decode a control_data message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.deviceid = payload.getUnsignedLong();
              
        this.index = payload.getUnsignedLong();
              
        this.timestamp = payload.getUnsignedLong();
              
        this.raw_lat = payload.getInt();
              
        this.raw_lon = payload.getInt();
              
        this.raw_alt = payload.getInt();
              
        this.global_lat = payload.getInt();
              
        this.global_lon = payload.getInt();
              
        this.global_alt = payload.getInt();
              
        this.global_relative_alt = payload.getInt();
              
        this.angles = payload.getFloat();
              
        this.nav_roll = payload.getFloat();
              
        this.nav_pitch = payload.getFloat();
              
        this.alt_error = payload.getFloat();
              
        this.aspd_error = payload.getFloat();
              
        this.xtrack_error = payload.getFloat();
              
        this.L1_dist = payload.getFloat();
              
        this.groundSpeed = payload.getFloat();
              
        this.AB_length = payload.getFloat();
              
        this.longitudinal_deviation = payload.getFloat();
              
        this.WP_A_dist = payload.getFloat();
              
        this.alongTrackDist = payload.getFloat();
              
        this.Nu = payload.getFloat();
              
        this.L1_xtrack_i = payload.getFloat();
              
        this.Nu1 = payload.getFloat();
              
        this.Nu2 = payload.getFloat();
              
        this.sine_Nu1 = payload.getFloat();
              
        this.loc = payload.getInt();
              
        this.roll = payload.getFloat();
              
        this.pitch = payload.getFloat();
              
        this.yaw = payload.getFloat();
              
        this.rollspeed = payload.getFloat();
              
        this.pitchspeed = payload.getFloat();
              
        this.yawspeed = payload.getFloat();
              
        this.expected_angle = payload.getFloat();
              
        this.achieved_angle = payload.getFloat();
              
        this.expected_accel = payload.getFloat();
              
        this.achieved_accel = payload.getFloat();
              
        this.P = payload.getFloat();
              
        this.I = payload.getFloat();
              
        this.D = payload.getFloat();
              
        this.last_out = payload.getFloat();
              
        this.raw_eph = payload.getUnsignedShort();
              
        this.raw_epv = payload.getUnsignedShort();
              
        this.raw_vel = payload.getUnsignedShort();
              
        this.raw_cog = payload.getUnsignedShort();
              
        this.global_vx = payload.getShort();
              
        this.global_vy = payload.getShort();
              
        this.global_vz = payload.getShort();
              
        this.global_hdg = payload.getUnsignedShort();
              
        this.imu_xacc = payload.getShort();
              
        this.imu_yacc = payload.getShort();
              
        this.imu_zacc = payload.getShort();
              
        this.imu_xgyro = payload.getShort();
              
        this.imu_ygyro = payload.getShort();
              
        this.imu_zgyro = payload.getShort();
              
        this.nav_bearing = payload.getShort();
              
        this.target_bearing = payload.getShort();
              
        this.wp_dist = payload.getUnsignedShort();
              
        this.raw_fix_type = payload.getUnsignedByte();
              
        this.raw_satellites_visible = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_control_data(){
        msgid = MAVLINK_MSG_ID_CONTROL_DATA;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_control_data(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_CONTROL_DATA;
        unpack(mavLinkPacket.payload);        
    }

                                                                                                                              
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_CONTROL_DATA -"+" deviceid:"+deviceid+" index:"+index+" timestamp:"+timestamp+" raw_lat:"+raw_lat+" raw_lon:"+raw_lon+" raw_alt:"+raw_alt+" global_lat:"+global_lat+" global_lon:"+global_lon+" global_alt:"+global_alt+" global_relative_alt:"+global_relative_alt+" angles:"+angles+" nav_roll:"+nav_roll+" nav_pitch:"+nav_pitch+" alt_error:"+alt_error+" aspd_error:"+aspd_error+" xtrack_error:"+xtrack_error+" L1_dist:"+L1_dist+" groundSpeed:"+groundSpeed+" AB_length:"+AB_length+" longitudinal_deviation:"+longitudinal_deviation+" WP_A_dist:"+WP_A_dist+" alongTrackDist:"+alongTrackDist+" Nu:"+Nu+" L1_xtrack_i:"+L1_xtrack_i+" Nu1:"+Nu1+" Nu2:"+Nu2+" sine_Nu1:"+sine_Nu1+" loc:"+loc+" roll:"+roll+" pitch:"+pitch+" yaw:"+yaw+" rollspeed:"+rollspeed+" pitchspeed:"+pitchspeed+" yawspeed:"+yawspeed+" expected_angle:"+expected_angle+" achieved_angle:"+achieved_angle+" expected_accel:"+expected_accel+" achieved_accel:"+achieved_accel+" P:"+P+" I:"+I+" D:"+D+" last_out:"+last_out+" raw_eph:"+raw_eph+" raw_epv:"+raw_epv+" raw_vel:"+raw_vel+" raw_cog:"+raw_cog+" global_vx:"+global_vx+" global_vy:"+global_vy+" global_vz:"+global_vz+" global_hdg:"+global_hdg+" imu_xacc:"+imu_xacc+" imu_yacc:"+imu_yacc+" imu_zacc:"+imu_zacc+" imu_xgyro:"+imu_xgyro+" imu_ygyro:"+imu_ygyro+" imu_zgyro:"+imu_zgyro+" nav_bearing:"+nav_bearing+" target_bearing:"+target_bearing+" wp_dist:"+wp_dist+" raw_fix_type:"+raw_fix_type+" raw_satellites_visible:"+raw_satellites_visible+"";
    }
}
        