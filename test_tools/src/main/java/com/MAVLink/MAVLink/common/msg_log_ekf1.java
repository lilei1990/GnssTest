/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LOG_EKF1 PACKING
package com.MAVLink.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* ekf1
*/
public class msg_log_ekf1 extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_LOG_EKF1 = 160;
    public static final int MAVLINK_MSG_LENGTH = 36;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LOG_EKF1;


      
    /**
    * a
    */
    public long time_us;
      
    /**
    * a
    */
    public float velN;
      
    /**
    * a
    */
    public float velE;
      
    /**
    * a
    */
    public float posN;
      
    /**
    * a
    */
    public float posE;
      
    /**
    * a
    */
    public short roll;
      
    /**
    * a
    */
    public short pitch;
      
    /**
    * a
    */
    public int yaw;
      
    /**
    * a
    */
    public short gyrX;
      
    /**
    * a
    */
    public short gyrY;
      
    /**
    * a
    */
    public short gyrZ;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_LOG_EKF1;
              
        packet.payload.putUnsignedLong(time_us);
              
        packet.payload.putFloat(velN);
              
        packet.payload.putFloat(velE);
              
        packet.payload.putFloat(posN);
              
        packet.payload.putFloat(posE);
              
        packet.payload.putShort(roll);
              
        packet.payload.putShort(pitch);
              
        packet.payload.putUnsignedShort(yaw);
              
        packet.payload.putShort(gyrX);
              
        packet.payload.putShort(gyrY);
              
        packet.payload.putShort(gyrZ);
        
        return packet;
    }

    /**
    * Decode a log_ekf1 message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.time_us = payload.getUnsignedLong();
              
        this.velN = payload.getFloat();
              
        this.velE = payload.getFloat();
              
        this.posN = payload.getFloat();
              
        this.posE = payload.getFloat();
              
        this.roll = payload.getShort();
              
        this.pitch = payload.getShort();
              
        this.yaw = payload.getUnsignedShort();
              
        this.gyrX = payload.getShort();
              
        this.gyrY = payload.getShort();
              
        this.gyrZ = payload.getShort();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_log_ekf1(){
        msgid = MAVLINK_MSG_ID_LOG_EKF1;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_log_ekf1(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_LOG_EKF1;
        unpack(mavLinkPacket.payload);        
    }

                          
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_LOG_EKF1 -"+" time_us:"+time_us+" velN:"+velN+" velE:"+velE+" posN:"+posN+" posE:"+posE+" roll:"+roll+" pitch:"+pitch+" yaw:"+yaw+" gyrX:"+gyrX+" gyrY:"+gyrY+" gyrZ:"+gyrZ+"";
    }
}
        